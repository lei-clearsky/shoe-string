@mixin box-sizing($boxmodel) {
  -webkit-box-sizing: $boxmodel;
  -moz-box-sizing: $boxmodel;
  box-sizing: $boxmodel;
}

// reference: http://nicolasgallagher.com/micro-clearfix-hack/
@mixin clearfix() {
  *zoom: 1; // For IE 6/7 only
  &:before, // Prevents top-margins from collapsing in modern browsers.
  &:after { 
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}
@mixin lz-make-columns($size) {
  @for $i from 1 through $grid-columns {
    .col-#{$size}-#{$i} {
      position: relative;
      min-height: 1px;
      float:left;
      width: percentage($i / $grid-columns);
      padding-left: ($grid-gutter-width / 2);
      padding-right: ($grid-gutter-width / 2);
      @include box-sizing(border-box);
    }
  }
}

// Alternative make-grid
/*
$sizes:
  (sm, 0px),
  (md, 420px),
  (lg, 1000px);

@each $size in $sizes {
  $category: nth($size, 1);
  $minwidth: nth($size, 2);

  @media (min-width: $minwidth) {
    @include column_def($category);
  }
}
*/
// Bootstrap way of making grid columns
// Reference: https://github.com/twbs/bootstrap-sass/blob/d35d4bd58708c3db82aaac7b50295ff37a2d1c83/assets/stylesheets/bootstrap/mixins/_grid-framework.scss
@mixin make-grid-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
  }
  #{$list} {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left:  ($grid-gutter-width / 2);
    padding-right: ($grid-gutter-width / 2);
  }
}

@mixin float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-#{$class}-#{$i}";
  }
  #{$list} {
    float: left;
  }
}

@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .col-#{$class}-#{$index} {
      width: percentage(($index / $grid-columns));
    }
  }
  @if ($type == offset) {
    .col-#{$class}-offset-#{$index} {
      margin-left: percentage(($index / $grid-columns));
    }
  }
}

@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}

// Create grid for specific class
@mixin make-grid($class) {
  @include float-grid-columns($class);
  @include loop-grid-columns($grid-columns, $class, width);
  @include loop-grid-columns($grid-columns, $class, offset);
}
